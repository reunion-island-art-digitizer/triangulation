!function(t){"function"==typeof define&&define.amd?define(t):t()}(function(){"use strict";var s=window.devicePixelRatio&&1<window.devicePixelRatio?window.devicePixelRatio:1,t="undefined"!=typeof FileReader,n="draggable"in document.createElement("span"),a=!!navigator.share;function e(){return"complete"===document.readyState}function i(){this.events={}}i.prototype.on=function(t,n,e){for(var a=[],i=arguments.length-3;0<i--;)a[i]=arguments[i+3];void 0===this.events[t]&&(this.events[t]=[]),this.events[t].push({scope:e,callback:n,args:a})},i.prototype.off=function(t,n,e){void 0!==this.events[t]&&(this.events[t]=this.events[t].filter(function(t){return t.scope!==e||t.callback!==n}))},i.prototype.has=function(t,e,a){if(void 0===this.events[t])return!1;var n=this.events[t].length;if(void 0===e&&void 0===a)return 0<n;return this.events[t].some(function(t){var n=!a||t.scope===a,t=t.callback===e;if(n&&t)return!0})},i.prototype.emit=function(t){for(var n=[],e=arguments.length-1;0<e--;)n[e]=arguments[e+1];if(void 0!==this.events[t]){var a,i=this.events[t].slice();for(a in i){var r=i[a];r&&r.callback&&r.callback.apply(r.scope,n.concat(r.args))}}};var r=new i,y=function(t,n,e){return t<n?n:e<t?e:t},f=function(t){var n=!1;if(void 0!==t)try{n=JSON.parse(JSON.stringify(t))}catch(t){}return n},o=function(t,n){void 0===t&&(t=300),void 0===n&&(n=150),"undefined"==typeof window?(this.canvasEl={width:t,height:n},this.ctx=null):(this.canvasEl=document.createElement("canvas"),this.canvasEl.width=t,this.canvasEl.height=n,this.ctx=this.canvasEl.getContext("2d"))},l={width:{configurable:!0},height:{configurable:!0}};o.prototype.getContext=function(){return this.ctx},o.prototype.toDataURL=function(t,n,e){if("function"!=typeof e)return this.canvasEl.toDataURL(t,n);e(this.canvasEl.toDataURL(t,n))},l.width.get=function(){return this.canvasEl.width},l.width.set=function(t){this.canvasEl.width=t},l.height.get=function(){return this.canvasEl.height},l.height.set=function(t){this.canvasEl.height=t},Object.defineProperties(o.prototype,l),"undefined"!=typeof window&&(o.Image=Image);function x(t){if(t instanceof HTMLImageElement){if(!t.naturalWidth||!t.naturalHeight||!1===t.complete)throw new Error("This this image hasn't finished loading: "+t.src);var n=new o(t.naturalWidth,t.naturalHeight),e=n.getContext("2d");e.drawImage(t,0,0,n.width,n.height);n=e.getImageData(0,0,n.width,n.height);return n.data&&n.data.length&&(void 0===n.width&&(n.width=t.naturalWidth),void 0===n.height&&(n.height=t.naturalHeight)),n}throw new Error("This object does not seem to be an image.")}function u(t){return"rgba("+(t=I({a:1},t)).r+", "+t.g+", "+t.b+", "+t.a+")"}function v(t,n,e){var a=e&&e.dpr?e.dpr:1,e=c(n,e,a,!0).ctx;return d(e,t,n,a),e.getImageData(0,0,n.width*a,n.height*a)}function b(t,n,e){var a=e&&e.dpr?e.dpr:1,e=c(n,e,a);return d(e.ctx,t,n,a),e.canvas.toDataURL()}var c=function(t,n,e,a){var i=!(!n||!n.backgroundColor)&&n.backgroundColor,n=new o(t.width*e,t.height*e,a),a=n.getContext("2d");return i&&(a.fillStyle=i,a.fillRect(0,0,t.width*e,t.height*e),a.fillStyle="transparent"),{canvas:n,ctx:a}},w=function(t){var n=c({width:1,height:1},{},1,!0).ctx;n.fillStyle=t,n.fillRect(0,0,1,1);n=n.getImageData(0,0,1,1).data;return{r:n[0],g:n[1],b:n[2],a:n[3]/255}},k={accuracy:.7,blur:4,fill:!0,stroke:!0,strokeWidth:.5,lineJoin:"miter",vertexCount:700,threshold:50,transparentColor:!1},_=["miter","round","bevel"],I=Object.assign,d=function(i,t,n,r){return r=r||1,t.forEach(function(t,n){var e,a;i.beginPath(),i.moveTo(t.a.x*r,t.a.y*r),i.lineTo(t.b.x*r,t.b.y*r),i.lineTo(t.c.x*r,t.c.y*r),i.lineTo(t.a.x*r,t.a.y*r),t.gradient?(e=i.createLinearGradient(t.gradient.x1*r,t.gradient.y1*r,t.gradient.x2*r,t.gradient.y2*r),a=t.gradient.colors.length-1,t.gradient.colors.forEach(function(t,n){t=u(t);e.addColorStop(n/a,t)}),i.fillStyle=e,i.fill(),0<t.strokeWidth&&(i.strokeStyle=e,i.lineWidth=t.strokeWidth*r,i.lineJoin=t.lineJoin,i.stroke())):(t.fill&&(i.fillStyle=u(t.fill),i.fill()),t.strokeColor&&(i.strokeStyle=u(t.strokeColor),i.lineWidth=t.strokeWidth*r,i.lineJoin=t.lineJoin,i.stroke())),i.closePath()}),i};function h(t){t=t.toString(16);return 1==t.length?"0"+t:t}function p(t){var n=t.r,e=t.g,t=t.b;return"#"+h(n)+h(e)+h(t)}function E(t,n){var u="";t.length&&t[0].gradient&&(u="<defs>");var c="";return t.forEach(function(t,n){var e,a,i,r,o=t.a,s=t.b,l=t.c;c+='<polygon points="'+o.x+","+o.y+" "+s.x+","+s.y+" "+l.x+","+l.y+'"',t.gradient?(e=t.boundingBox,o=((t.gradient.x1-e.x)/e.width*100).toFixed(3),s=((t.gradient.y1-e.y)/e.height*100).toFixed(3),l=((t.gradient.x2-e.x)/e.width*100).toFixed(3),e=((t.gradient.y2-e.y)/e.height*100).toFixed(3),u+='\n\t<linearGradient id="gradient-'+n+'" x1="'+o+'%" y1="'+s+'%" x2="'+l+'%" y2="'+e+'%">',a=t.gradient.colors.length-1,t.gradient.colors.forEach(function(t,n){var e=p(t),t=t.a<1?' stop-opacity="'+t.a+'"':"",n=(n/a*100).toFixed(3);u+='\n\t\t\t\t\t<stop offset="'+n+'%" stop-color="'+e+'"'+t+"/>\n\t\t\t\t"}),u+="</linearGradient>",c+=' fill="url(#gradient-'+n+')"',0<t.strokeWidth&&(c+=' stroke="url(#gradient-'+n+')" stroke-width="'+t.strokeWidth+'" stroke-linejoin="'+t.lineJoin+'"')):(t.fill?(i=p(t.fill),r=t.fill.a<1?' fill-opacity="'+t.fill.a+'"':"",c+=' fill="'+i+'"'+r):c+=' fill="transparent"',t.strokeColor&&(i=p(t.strokeColor),r=t.strokeColor.a<1?' stroke-opacity="'+t.strokeColor.a+'"':"",c+=' stroke="'+i+'" stroke-width="'+t.strokeWidth+'" stroke-linejoin="'+t.lineJoin+'"'+r)),c+="/>\n\t"}),u.length&&(u+="\n\t\t</defs>"),'<?xml version="1.0" standalone="yes"?>\n<svg width="'+n.width+'" height="'+n.height+'" xmlns="http://www.w3.org/2000/svg" version="1.1" >\n\t'+u+"\n\t"+c+"\n</svg>"}function g(t,n){return t(n={exports:{}},n.exports),n.exports}l=g(function(t){function m(t,n,e){this.a=t,this.b=n,this.c=e;var a,i,r,o,s=n.x-t.x,l=n.y-t.y,u=e.x-t.x,c=e.y-t.y,d=s*(t.x+n.x)+l*(t.y+n.y),h=u*(t.x+e.x)+c*(t.y+e.y),p=2*(s*(e.y-n.y)-l*(e.x-n.x));Math.abs(p)<1e-6?(a=Math.min(t.x,n.x,e.x),i=Math.min(t.y,n.y,e.y),r=.5*(Math.max(t.x,n.x,e.x)-a),o=.5*(Math.max(t.y,n.y,e.y)-i),this.x=a+r,this.y=i+o):(this.x=(c*d-l*h)/p,this.y=(s*h-u*d)/p,r=this.x-t.x,o=this.y-t.y),this.r=r*r+o*o}function y(t,n){return n.x-t.x}function n(t){if(t.length<3)return[];t.sort(y);for(var n=t[g=t.length-1].x,e=t[0].x,a=t[g].y,i=a;g--;)t[g].y<a&&(a=t[g].y),t[g].y>i&&(i=t[g].y);for(var r,o,s,l=e-n,u=i-a,c=u<l?l:u,e=.5*(e+n),n=.5*(i+a),d=[new m({x:e-20*c,y:n-c,__sentinel:!0},{x:e,y:n+20*c,__sentinel:!0},{x:e+20*c,y:n-c,__sentinel:!0})],h=[],p=[],g=t.length;g--;){for(p.length=0,r=d.length;r--;)0<(l=t[g].x-d[r].x)&&l*l>d[r].r?(h.push(d[r]),d.splice(r,1)):l*l+(u=t[g].y-d[r].y)*u>d[r].r||(p.push(d[r].a,d[r].b,d[r].b,d[r].c,d[r].c,d[r].a),d.splice(r,1));for(!function(t){var n,e,a,i,r,o=t.length;t:for(;o;)for(e=t[--o],n=t[--o],a=o;a;)if(r=t[--a],n===(i=t[--a])&&e===r||n===r&&e===i){t.splice(o,2),t.splice(a,2),o-=2;continue t}}(p),r=p.length;r;)s=p[--r],o=p[--r],d.push(new m(o,s,t[g]))}for(Array.prototype.push.apply(h,d),g=h.length;g--;)(h[g].a.__sentinel||h[g].b.__sentinel||h[g].c.__sentinel)&&h.splice(g,1);return h}m.prototype.draw=function(t){t.beginPath(),t.moveTo(this.a.x,this.a.y),t.lineTo(this.b.x,this.b.y),t.lineTo(this.c.x,this.c.y),t.closePath(),t.stroke()},t.exports={Triangle:m,triangulate:n}});l.Triangle;var m=l.triangulate,D=g(function(t,n){function m(t){if(!(this instanceof m))return new m(t);var i=t.width,n=t.height,e=[[-1,0,1],[-2,0,2],[-1,0,1]],a=[[-1,-2,-1],[0,0,0],[1,2,1]],r=[],o=[];function s(a){return function(t,n,e){return a[4*(i*n+t)+(e=e||0)]}}for(var l,u=s(t.data),c=0;c<n;c++)for(l=0;l<i;l++){var d=(u(l,c,0)+u(l,c,1)+u(l,c,2))/3;o.push(d,d,d,255)}for(u=s(o),c=0;c<n;c++)for(l=0;l<i;l++){var h=e[0][0]*u(l-1,c-1)+e[0][1]*u(l,c-1)+e[0][2]*u(l+1,c-1)+e[1][0]*u(l-1,c)+e[1][1]*u(l,c)+e[1][2]*u(l+1,c)+e[2][0]*u(l-1,c+1)+e[2][1]*u(l,c+1)+e[2][2]*u(l+1,c+1),p=a[0][0]*u(l-1,c-1)+a[0][1]*u(l,c-1)+a[0][2]*u(l+1,c-1)+a[1][0]*u(l-1,c)+a[1][1]*u(l,c)+a[1][2]*u(l+1,c)+a[2][0]*u(l-1,c+1)+a[2][1]*u(l,c+1)+a[2][2]*u(l+1,c+1),p=Math.sqrt(h*h+p*p)>>>0;r.push(p,p,p,255)}var g=r;return(g="function"==typeof Uint8ClampedArray?new Uint8ClampedArray(r):g).toImageData=function(){return m.toImageData(g,i,n)},g}function i(t,n,e){return{width:n,height:e,data:t}}m.toImageData=function(t,n,e){if("function"==typeof ImageData&&"[object Uint16Array]"===Object.prototype.toString.call(t))return new ImageData(t,n,e);if("object"!=typeof window||"object"!=typeof window.document)return new i(t,n,e);var a=document.createElement("canvas");if("function"!=typeof a.getContext)return new i(t,n,e);e=a.getContext("2d").createImageData(n,e);return e.data.set(t),e},(n=t.exports?t.exports=m:n).Sobel=m});D.Sobel;var C=function(t){return t&&"number"==typeof t.width&&"number"==typeof t.height&&t.data&&"number"==typeof t.data.length&&"object"==typeof t.data},A=function(n){if(C(n)){if("undefined"==typeof Uint8ClampedArray){if("undefined"==typeof window)throw new Error("Can't copy imageData in webworker without Uint8ClampedArray support.");return S(n)}var e,t=new Uint8ClampedArray(n.data);if("undefined"==typeof ImageData)return{width:n.width,height:n.height,data:t};try{e=new ImageData(t,n.width,n.height)}catch(t){if("undefined"==typeof window)throw new Error("Can't copy imageData in webworker without proper ImageData() support.");e=S(n)}return e}throw new Error("Given imageData object is not useable.")};function S(t){var n=new o(t.width,t.height).getContext("2d");return n.putImageData(t,0,0),n.getImageData(0,0,t.width,t.height)}var G=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],V=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];function q(){this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}var P=function(t,n,e,a,i,r){for(var o,s,l,u,c,d,h,p,g,m,y,f,x,v,b,w,k,_,I,E,D,C=t.data,A=r+r+1,S=a-1,P=i-1,L=r+1,T=L*(L+1)/2,O=new q,M=O,j=1;j<A;j++){var B,M=M.next=new q;j==L&&(B=M)}M.next=O;for(var R=null,U=null,W=u=0,F=G[r],N=V[r],H=0;H<i;H++){for(x=v=b=w=c=d=h=p=0,g=L*(k=C[u]),m=L*(_=C[u+1]),y=L*(I=C[u+2]),f=L*(E=C[u+3]),c+=T*k,d+=T*_,h+=T*I,p+=T*E,M=O,j=0;j<L;j++)M.r=k,M.g=_,M.b=I,M.a=E,M=M.next;for(j=1;j<L;j++)c+=(M.r=k=C[s=u+((S<j?S:j)<<2)])*(D=L-j),d+=(M.g=_=C[s+1])*D,h+=(M.b=I=C[s+2])*D,p+=(M.a=E=C[s+3])*D,x+=k,v+=_,b+=I,w+=E,M=M.next;for(R=O,U=B,o=0;o<a;o++)C[u+3]=E=p*F>>N,0!=E?(C[u]=(c*F>>N)*(E=255/E),C[u+1]=(d*F>>N)*E,C[u+2]=(h*F>>N)*E):C[u]=C[u+1]=C[u+2]=0,c-=g,d-=m,h-=y,p-=f,g-=R.r,m-=R.g,y-=R.b,f-=R.a,s=W+((s=o+r+1)<S?s:S)<<2,c+=x+=R.r=C[s],d+=v+=R.g=C[s+1],h+=b+=R.b=C[s+2],p+=w+=R.a=C[s+3],R=R.next,g+=k=U.r,m+=_=U.g,y+=I=U.b,f+=E=U.a,x-=k,v-=_,b-=I,w-=E,U=U.next,u+=4;W+=a}for(o=0;o<a;o++){for(v=b=w=x=d=h=p=c=0,g=L*(k=C[u=o<<2]),m=L*(_=C[u+1]),y=L*(I=C[u+2]),f=L*(E=C[u+3]),c+=T*k,d+=T*_,h+=T*I,p+=T*E,M=O,j=0;j<L;j++)M.r=k,M.g=_,M.b=I,M.a=E,M=M.next;for(l=a,j=1;j<=r;j++)c+=(M.r=k=C[u=l+o<<2])*(D=L-j),d+=(M.g=_=C[u+1])*D,h+=(M.b=I=C[u+2])*D,p+=(M.a=E=C[u+3])*D,x+=k,v+=_,b+=I,w+=E,M=M.next,j<P&&(l+=a);for(u=o,R=O,U=B,H=0;H<i;H++)C[(s=u<<2)+3]=E=p*F>>N,0<E?(C[s]=(c*F>>N)*(E=255/E),C[s+1]=(d*F>>N)*E,C[s+2]=(h*F>>N)*E):C[s]=C[s+1]=C[s+2]=0,c-=g,d-=m,h-=y,p-=f,g-=R.r,m-=R.g,y-=R.b,f-=R.a,s=o+((s=H+L)<P?s:P)*a<<2,c+=x+=R.r=C[s],d+=v+=R.g=C[s+1],h+=b+=R.b=C[s+2],p+=w+=R.a=C[s+3],R=R.next,g+=k=U.r,m+=_=U.g,y+=I=U.b,f+=E=U.a,x-=k,v-=_,b-=I,w-=E,U=U.next,u+=a}return t},L=function(t){for(var n,e=t.data.length,a=0;a<e;a+=4)n=.34*t.data[a]+.5*t.data[a+1]+.16*t.data[a+2],t.data[a]=n,t.data[a+1]=n,t.data[a+2]=n;return t},T=function(t,n){for(var e,a,i,r,o,s,l,u,c=t.width,d=t.height,h=t.data,p=[],g=0;g<d;g+=2)for(e=0;e<c;e+=2){for(l=u=0,a=-1;a<=1;a++)if(s=(o=g+a)*c,0<=o&&o<d)for(i=-1;i<=1;i++)0<=(r=e+i)&&r<c&&(l+=h[r+s<<2],u++);u&&(l/=u),n<l&&p.push({x:e,y:g})}return p};function O(t,n,e){var a=t+"|"+n;e[a]||(e[a]={x:t,y:n})}function M(t,n,e){var a=(0|y(t.x,1,n.width-2))+(0|y(t.y,1,n.height-2))*n.width<<2;return a>=n.data.length&&(a=n.data.length-5),t=n.data[a+3]/255,e&&0==t?e:{r:n.data[a],g:n.data[a+1],b:n.data[a+2],a:t}}function j(t){return{x:.33333*(t.a.x+t.b.x+t.c.x),y:.33333*(t.a.y+t.b.y+t.c.y)}}function B(t){return 0===t.a}var R=function(t,n,e,a,i){for(var r={},o=Math.max(~~(n*(1-e)),5),e=Math.round(Math.sqrt(o)),s=~~(a/e),l=~~(i/Math.round(Math.ceil(o/e))),u=0,c=0,d=0,d=0;d<i;d+=l)for(c=++u%2==0?~~(s/2):0;c<a;c+=s)c<a&&d<i&&O(~~(c+Math.cos(d)*l),~~(d+Math.sin(c)*s),r);O(0,0,r),O(a-1,0,r),O(a-1,i-1,r),O(0,i-1,r);var e=n-Object.keys(r).length,h=t.length,p=~~(h/e);if(0<n&&0<p)for(var g=0,g=0;g<h;g+=p)O(t[g].x,t[g].y,r);return t=null,Object.keys(r).map(function(t){return r[t]})},U=function(t,n,e){return t.forEach(function(t){var n,e,a,i;t.boundingBox=(t=[t.a,t.b,t.c],a=n=1/0,i=e=-1/0,t.forEach(function(t){t.x<n&&(n=t.x),t.y<a&&(a=t.y),t.x>e&&(e=t.x),t.y>i&&(i=t.y)}),{x:n,y:a,width:e-n,height:i-a})}),t.filter(function(t){return 0<t.boundingBox.width&&0<t.boundingBox.height})};function W(t){t=function(t){if("string"==typeof t){var n=[0,0,0,0];return"#"===t[0]&&(t.length<7&&(t="#"+t[1]+t[1]+t[2]+t[2]+t[3]+t[3]+(4<t.length?t[4]+t[4]:"")),n=[parseInt(t.substr(1,2),16),parseInt(t.substr(3,2),16),parseInt(t.substr(5,2),16),7<t.length?parseInt(t.substr(7,2),16)/255:1]),0===t.indexOf("rgb")&&(t.includes("rgba")||(t+=",1"),n=t.match(/[\.\d]+/g).map(function(t){return+t})),n}}(t);if(t)return{r:t[0],g:t[1],b:t[2],a:t[3]}}function F(t,e,n){function a(t,n){var e=B(t)&&l;return n&&!e?n:e?l:t}var i=n.fill,r=n.stroke,o=n.strokeWidth,s=n.lineJoin,l=n.transparentColor,u=!!i&&W(i),c=!!r&&W(r);return t.forEach(function(t){var n=M(j(t),e);i&&(t.fill=a(n,u)),r&&(t.strokeColor=a(n,c),t.strokeWidth=o,t.lineJoin=s)}),t}function N(t){return.2126*(t=[t.r,t.g,t.b].map(function(t){return(t/=255)<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4)}))[0]+.7152*t[1]+.0722*t[2]}function H(t,n){var e=n.x-t.x,t=n.y-t.y;return Math.sqrt(e*e+t*t)}function J(t,n){if(C(t)){var e={width:t.width,height:t.height},a=A(t),t=A(t),a=P(a,0,0,e.width,e.height,n.blur),a=L(a),a=D(a).toImageData(),a=T(a,n.threshold),a=R(a,n.vertexCount,n.accuracy,e.width,e.height),e=m(a),e=U(e);return n.transparentColor||(e=Y(e,t)),e=!0===n.fill&&!0===n.gradients?(d=t,h=n,(a=e).forEach(function(e){var a={};"abc".split("").forEach(function(t){var n=M(e[t],d,h.transparentColor);a[t]={key:t,color:n,x:e[t].x,y:e[t].y},a[t].luminance=N(a[t].color);n="abc".replace(t,"").split("");a[t].median={x:(e[n[0]].x+e[n[1]].x)/2,y:(e[n[0]].y+e[n[1]].y)/2},a[t].medianColor=M(a[t].median,d,h.transparentColor),a[t].medianLuminance=N(a[t].medianColor)});for(var t=[a.a,a.b,a.c].sort(function(t,n){return Math.abs(t.luminance-t.medianLuminance)-Math.abs(n.luminance-n.medianLuminance)}),n=t[0],i=t[0],r=n.median,o=[i],s=H(i,r),l=1,u=h.gradientStops-2;l<u;l++){var c=l*(s/h.gradientStops)/s,c={x:i.x+c*(r.x-i.x),y:i.y+c*(r.y-i.y)};o.push(c)}o.push(r),e.gradient={x1:n.x,y1:n.y,x2:n.median.x,y2:n.median.y,colors:o.map(function(t){return M(t,d,h.transparentColor)})},h.stroke&&(e.strokeWidth=h.strokeWidth,e.lineJoin=h.lineJoin),a=null}),a):F(e,t,n)}throw new Error("Can't work with the imageData provided. It seems to be corrupt.");var d,h}var Y=function(t,n){return t.filter(function(t){t=M(j(t),n);return!B(t)})};function X(a){var t;"number"!=typeof(t="object"!=typeof(t=f(t=a))?{}:t).accuracy||isNaN(t.accuracy)?t.accuracy=k.accuracy:t.accuracy=y(t.accuracy,0,1),"number"==typeof t.blur&&!isNaN(t.blur)||(t.blur=k.blur),t.blur<=0&&(t.blur=1),"string"!=typeof t.fill&&"boolean"!=typeof t.fill&&(t.fill=k.fill),"string"!=typeof t.stroke&&"boolean"!=typeof t.stroke&&(t.stroke=k.stroke),"number"==typeof t.strokeWidth&&!isNaN(t.strokeWidth)||(t.strokeWidth=k.strokeWidth),"number"!=typeof t.threshold||isNaN(t.threshold)?t.threshold=k.threshold:t.threshold=y(t.threshold,1,100),"string"==typeof t.lineJoin&&-1!==_.indexOf(t.lineJoin)||(t.lineJoin=k.lineJoin),t.gradients&&t.fill?t.gradients=!0:t.gradients=!1,t.gradients&&(("number"!=typeof t.gradientStops||isNaN(t.gradientStops)||t.gradientStops<2)&&(t.gradientStops=2),t.gradientStops=Math.round(t.gradientStops)),"number"==typeof t.vertexCount&&!isNaN(t.vertexCount)||(t.vertexCount=k.vertexCount),t.vertexCount<=0&&(t.vertexCount=1),"string"!=typeof t.transparentColor&&"boolean"!=typeof t.transparentColor&&(t.transparentColor=k.transparentColor),!0===typeof t.transparentColor&&(t.transparentColor=!1),"string"==typeof t.transparentColor&&(t.transparentColor=w(t.transparentColor)),a=t;var i,o,s=!1,l=!1,u=new Worker(URL.createObjectURL(new Blob(["function createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar delaunay = createCommonjsModule(function (module) {\nfunction Triangle(a, b, c) {\n  this.a = a;\n  this.b = b;\n  this.c = c;\n\n  var A = b.x - a.x,\n      B = b.y - a.y,\n      C = c.x - a.x,\n      D = c.y - a.y,\n      E = A * (a.x + b.x) + B * (a.y + b.y),\n      F = C * (a.x + c.x) + D * (a.y + c.y),\n      G = 2 * (A * (c.y - b.y) - B * (c.x - b.x)),\n      minx, miny, dx, dy;\n\n  /* If the points of the triangle are collinear, then just find the\n   * extremes and use the midpoint as the center of the circumcircle. */\n  if(Math.abs(G) < 0.000001) {\n    minx = Math.min(a.x, b.x, c.x);\n    miny = Math.min(a.y, b.y, c.y);\n    dx   = (Math.max(a.x, b.x, c.x) - minx) * 0.5;\n    dy   = (Math.max(a.y, b.y, c.y) - miny) * 0.5;\n\n    this.x = minx + dx;\n    this.y = miny + dy;\n    this.r = dx * dx + dy * dy;\n  }\n\n  else {\n    this.x = (D*E - B*F) / G;\n    this.y = (A*F - C*E) / G;\n    dx = this.x - a.x;\n    dy = this.y - a.y;\n    this.r = dx * dx + dy * dy;\n  }\n}\n\nTriangle.prototype.draw = function(ctx) {\n  ctx.beginPath();\n  ctx.moveTo(this.a.x, this.a.y);\n  ctx.lineTo(this.b.x, this.b.y);\n  ctx.lineTo(this.c.x, this.c.y);\n  ctx.closePath();\n  ctx.stroke();\n};\n\nfunction byX(a, b) {\n  return b.x - a.x\n}\n\nfunction dedup(edges) {\n  var j = edges.length,\n      a, b, i, m, n;\n\n  outer: while(j) {\n    b = edges[--j];\n    a = edges[--j];\n    i = j;\n    while(i) {\n      n = edges[--i];\n      m = edges[--i];\n      if((a === m && b === n) || (a === n && b === m)) {\n        edges.splice(j, 2);\n        edges.splice(i, 2);\n        j -= 2;\n        continue outer\n      }\n    }\n  }\n}\n\nfunction triangulate(vertices) {\n  /* Bail if there aren't enough vertices to form any triangles. */\n  if(vertices.length < 3)\n    return []\n\n  /* Ensure the vertex array is in order of descending X coordinate\n   * (which is needed to ensure a subquadratic runtime), and then find\n   * the bounding box around the points. */\n  vertices.sort(byX);\n\n  var i    = vertices.length - 1,\n      xmin = vertices[i].x,\n      xmax = vertices[0].x,\n      ymin = vertices[i].y,\n      ymax = ymin;\n\n  while(i--) {\n    if(vertices[i].y < ymin) ymin = vertices[i].y;\n    if(vertices[i].y > ymax) ymax = vertices[i].y;\n  }\n\n  /* Find a supertriangle, which is a triangle that surrounds all the\n   * vertices. This is used like something of a sentinel value to remove\n   * cases in the main algorithm, and is removed before we return any\n   * results.\n   *\n   * Once found, put it in the \"open\" list. (The \"open\" list is for\n   * triangles who may still need to be considered; the \"closed\" list is\n   * for triangles which do not.) */\n  var dx     = xmax - xmin,\n      dy     = ymax - ymin,\n      dmax   = (dx > dy) ? dx : dy,\n      xmid   = (xmax + xmin) * 0.5,\n      ymid   = (ymax + ymin) * 0.5,\n      open   = [\n        new Triangle(\n          {x: xmid - 20 * dmax, y: ymid -      dmax, __sentinel: true},\n          {x: xmid            , y: ymid + 20 * dmax, __sentinel: true},\n          {x: xmid + 20 * dmax, y: ymid -      dmax, __sentinel: true}\n        )\n      ],\n      closed = [],\n      edges = [],\n      j, a, b;\n\n  /* Incrementally add each vertex to the mesh. */\n  i = vertices.length;\n  while(i--) {\n    /* For each open triangle, check to see if the current point is\n     * inside it's circumcircle. If it is, remove the triangle and add\n     * it's edges to an edge list. */\n    edges.length = 0;\n    j = open.length;\n    while(j--) {\n      /* If this point is to the right of this triangle's circumcircle,\n       * then this triangle should never get checked again. Remove it\n       * from the open list, add it to the closed list, and skip. */\n      dx = vertices[i].x - open[j].x;\n      if(dx > 0 && dx * dx > open[j].r) {\n        closed.push(open[j]);\n        open.splice(j, 1);\n        continue\n      }\n\n      /* If not, skip this triangle. */\n      dy = vertices[i].y - open[j].y;\n      if(dx * dx + dy * dy > open[j].r)\n        continue\n\n      /* Remove the triangle and add it's edges to the edge list. */\n      edges.push(\n        open[j].a, open[j].b,\n        open[j].b, open[j].c,\n        open[j].c, open[j].a\n      );\n      open.splice(j, 1);\n    }\n\n    /* Remove any doubled edges. */\n    dedup(edges);\n\n    /* Add a new triangle for each edge. */\n    j = edges.length;\n    while(j) {\n      b = edges[--j];\n      a = edges[--j];\n      open.push(new Triangle(a, b, vertices[i]));\n    }\n  }\n\n  /* Copy any remaining open triangles to the closed list, and then\n   * remove any triangles that share a vertex with the supertriangle. */\n  Array.prototype.push.apply(closed, open);\n\n  i = closed.length;\n  while(i--)\n    if(closed[i].a.__sentinel ||\n       closed[i].b.__sentinel ||\n       closed[i].c.__sentinel)\n      closed.splice(i, 1);\n\n  /* Yay, we're done! */\n  return closed\n}\n\n{\n    module.exports = {\n        Triangle: Triangle,\n        triangulate: triangulate\n    };\n}\n});\nvar delaunay_1 = delaunay.Triangle;\nvar delaunay_2 = delaunay.triangulate;\n\nvar sobel = createCommonjsModule(function (module, exports) {\n(function(root) {\n\n  function Sobel(imageData) {\n    if (!(this instanceof Sobel)) {\n      return new Sobel(imageData);\n    }\n\n    var width = imageData.width;\n    var height = imageData.height;\n\n    var kernelX = [\n      [-1,0,1],\n      [-2,0,2],\n      [-1,0,1]\n    ];\n\n    var kernelY = [\n      [-1,-2,-1],\n      [0,0,0],\n      [1,2,1]\n    ];\n\n    var sobelData = [];\n    var grayscaleData = [];\n\n    function bindPixelAt(data) {\n      return function(x, y, i) {\n        i = i || 0;\n        return data[((width * y) + x) * 4 + i];\n      };\n    }\n\n    var data = imageData.data;\n    var pixelAt = bindPixelAt(data);\n    var x, y;\n\n    for (y = 0; y < height; y++) {\n      for (x = 0; x < width; x++) {\n        var r = pixelAt(x, y, 0);\n        var g = pixelAt(x, y, 1);\n        var b = pixelAt(x, y, 2);\n\n        var avg = (r + g + b) / 3;\n        grayscaleData.push(avg, avg, avg, 255);\n      }\n    }\n\n    pixelAt = bindPixelAt(grayscaleData);\n\n    for (y = 0; y < height; y++) {\n      for (x = 0; x < width; x++) {\n        var pixelX = (\n            (kernelX[0][0] * pixelAt(x - 1, y - 1)) +\n            (kernelX[0][1] * pixelAt(x, y - 1)) +\n            (kernelX[0][2] * pixelAt(x + 1, y - 1)) +\n            (kernelX[1][0] * pixelAt(x - 1, y)) +\n            (kernelX[1][1] * pixelAt(x, y)) +\n            (kernelX[1][2] * pixelAt(x + 1, y)) +\n            (kernelX[2][0] * pixelAt(x - 1, y + 1)) +\n            (kernelX[2][1] * pixelAt(x, y + 1)) +\n            (kernelX[2][2] * pixelAt(x + 1, y + 1))\n        );\n\n        var pixelY = (\n          (kernelY[0][0] * pixelAt(x - 1, y - 1)) +\n          (kernelY[0][1] * pixelAt(x, y - 1)) +\n          (kernelY[0][2] * pixelAt(x + 1, y - 1)) +\n          (kernelY[1][0] * pixelAt(x - 1, y)) +\n          (kernelY[1][1] * pixelAt(x, y)) +\n          (kernelY[1][2] * pixelAt(x + 1, y)) +\n          (kernelY[2][0] * pixelAt(x - 1, y + 1)) +\n          (kernelY[2][1] * pixelAt(x, y + 1)) +\n          (kernelY[2][2] * pixelAt(x + 1, y + 1))\n        );\n\n        var magnitude = Math.sqrt((pixelX * pixelX) + (pixelY * pixelY))>>>0;\n\n        sobelData.push(magnitude, magnitude, magnitude, 255);\n      }\n    }\n\n    var clampedArray = sobelData;\n\n    if (typeof Uint8ClampedArray === 'function') {\n      clampedArray = new Uint8ClampedArray(sobelData);\n    }\n\n    clampedArray.toImageData = function() {\n      return Sobel.toImageData(clampedArray, width, height);\n    };\n\n    return clampedArray;\n  }\n\n  Sobel.toImageData = function toImageData(data, width, height) {\n    if (typeof ImageData === 'function' && Object.prototype.toString.call(data) === '[object Uint16Array]') {\n      return new ImageData(data, width, height);\n    } else {\n      if (typeof window === 'object' && typeof window.document === 'object') {\n        var canvas = document.createElement('canvas');\n\n        if (typeof canvas.getContext === 'function') {\n          var context = canvas.getContext('2d');\n          var imageData = context.createImageData(width, height);\n          imageData.data.set(data);\n          return imageData;\n        } else {\n          return new FakeImageData(data, width, height);\n        }\n      } else {\n        return new FakeImageData(data, width, height);\n      }\n    }\n  };\n\n  function FakeImageData(data, width, height) {\n    return {\n      width: width,\n      height: height,\n      data: data\n    };\n  }\n\n  {\n    if ( module.exports) {\n      exports = module.exports = Sobel;\n    }\n    exports.Sobel = Sobel;\n  }\n\n})();\n});\nvar sobel_1 = sobel.Sobel;\n\nvar isImageData = imageData => {\n\treturn (\n\t\timageData && \n\t\ttypeof imageData.width === 'number' &&\n\t\ttypeof imageData.height === 'number' &&\n\t\timageData.data &&\n\t\ttypeof imageData.data.length === 'number' &&\n\t\ttypeof imageData.data === 'object'\n\t);\n};\n\nclass Canvas {\n\tconstructor ( width = 300, height = 150 ) {\n\t\tif ( typeof window === 'undefined' ) {\n\t\t\tthis.canvasEl = { width, height };\n\t\t\tthis.ctx = null;\n\t\t} else {\n\t\t\tthis.canvasEl = document.createElement( 'canvas' );\n\t\t\tthis.canvasEl.width = width;\n\t\t\tthis.canvasEl.height = height;\n\t\t\tthis.ctx = this.canvasEl.getContext( '2d' );\n\t\t} \n\t}\n\n\tgetContext () {\n\t\treturn this.ctx;\n\t}\n\n\ttoDataURL ( type, encoderOptions, cb ) {\n\t\tif ( typeof cb === 'function' ) {\n\t\t\tcb( this.canvasEl.toDataURL( type, encoderOptions ) );\n\t\t} else {\n\t\t\treturn this.canvasEl.toDataURL( type, encoderOptions );\n\t\t}\n\t}\n\t\n\tget width () {\n\t\treturn this.canvasEl.width;\n\t}\n\t\n\tset width ( newWidth ) {\n\t\tthis.canvasEl.width = newWidth;\n\t}\n\n\tget height () {\n\t\treturn this.canvasEl.height;\n\t}\n\n\tset height ( newHeight ) {\n\t\tthis.canvasEl.height = newHeight;\n\t}\n}\n\nif ( typeof window !== 'undefined' ) {\n\tCanvas.Image = Image;\n}\n\n// import Canvas from 'canvas';\n\nvar copyImageData = imageData => {\n\tif ( isImageData ( imageData ) ) {\n\t\tif ( typeof Uint8ClampedArray === 'undefined' ) {\n\t\t\tif ( typeof window === 'undefined' ) {\n\t\t\t\tthrow new Error( \"Can't copy imageData in webworker without Uint8ClampedArray support.\" );\n\t\t\t} else {\n\t\t\t\treturn copyImageDataWithCanvas( imageData );\n\t\t\t}\n\t\t} else {\n\t\t\tconst clampedArray = new Uint8ClampedArray( imageData.data );\n\n\t\t\tif ( typeof ImageData === 'undefined' ) {\n\t\t\t\t// http://stackoverflow.com/a/15238036/229189\n\t\t\t\treturn {\n\t\t\t\t\twidth: imageData.width,\n\t\t\t\t\theight: imageData.height,\n\t\t\t\t\tdata: clampedArray\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// http://stackoverflow.com/a/15908922/229189#comment57192591_15908922\n\t\t\t\tlet result;\n\n\t\t\t\ttry {\n\t\t\t\t\tresult = new ImageData( clampedArray, imageData.width, imageData.height );\n\t\t\t\t} catch ( err ) {\n\t\t\t\t\tif ( typeof window === 'undefined' ) {\n\t\t\t\t\t\tthrow new Error( \"Can't copy imageData in webworker without proper ImageData() support.\" );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = copyImageDataWithCanvas( imageData );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tthrow new Error( 'Given imageData object is not useable.' );\n\t}\n};\n\n// http://stackoverflow.com/a/11918126/229189\nfunction copyImageDataWithCanvas ( imageData ) {\n\tconst canvas = new Canvas( imageData.width, imageData.height );\n\tconst ctx = canvas.getContext( '2d' );\n\n\tctx.putImageData( imageData, 0, 0 );\n\t\t\t\t\n\treturn ctx.getImageData( 0, 0, imageData.width, imageData.height );\n}\n\n/*\n    StackBlur - a fast almost Gaussian Blur For Canvas\n\n    Version:     0.5\n    Author:        Mario Klingemann\n    Contact:     mario@quasimondo.com\n    Website:    http://www.quasimondo.com/StackBlurForCanvas\n    Twitter:    @quasimondo\n\n    In case you find this class useful - especially in commercial projects -\n    I am not totally unhappy for a small donation to my PayPal account\n    mario@quasimondo.de\n\n    Or support me on flattr:\n    https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript\n\n    Copyright (c) 2010 Mario Klingemann\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without\n    restriction, including without limitation the rights to use,\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following\n    conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n    */\n\nconst mul_table = [\n    512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,\n    454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,\n    482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,\n    437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,\n    497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,\n    320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,\n    446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,\n    329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,\n    505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,\n    399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,\n    324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,\n    268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,\n    451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,\n    385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,\n    332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,\n    289,287,285,282,280,278,275,273,271,269,267,265,263,261,259];\n\n\nconst shg_table = [\n    9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17,\n    17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19,\n    19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,\n    20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21,\n    21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n    21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22,\n    22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n    22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23,\n    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n    23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24 ];\n\nfunction BlurStack () {\n\tthis.r = 0;\n\tthis.g = 0;\n\tthis.b = 0;\n\tthis.a = 0;\n\tthis.next = null;\n}\n\nvar stackblur = ( imageData, top_x, top_y, width, height, radius ) => {\n\tvar pixels = imageData.data;\n\n\tvar x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum,\n\t\tr_out_sum, g_out_sum, b_out_sum, a_out_sum,\n\t\tr_in_sum, g_in_sum, b_in_sum, a_in_sum,\n\t\tpr, pg, pb, pa, rbs;\n\n\tvar div = radius + radius + 1;\n\tvar widthMinus1  = width - 1;\n\tvar heightMinus1 = height - 1;\n\tvar radiusPlus1  = radius + 1;\n\tvar sumFactor = radiusPlus1 * ( radiusPlus1 + 1 ) / 2;\n\n\tvar stackStart = new BlurStack();\n\tvar stack = stackStart;\n\t\n\tfor ( i = 1; i < div; i++ ) {\n\t\tstack = stack.next = new BlurStack();\n\t\tif (i == radiusPlus1) var stackEnd = stack;\n\t}\n\tstack.next = stackStart;\n\t\n\tvar stackIn = null;\n\tvar stackOut = null;\n\n\tyw = yi = 0;\n\n\tvar mul_sum = mul_table[radius];\n\tvar shg_sum = shg_table[radius];\n\n\tfor ( y = 0; y < height; y++ ) {\n\t\tr_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;\n\n\t\tr_out_sum = radiusPlus1 * ( pr = pixels[yi] );\n\t\tg_out_sum = radiusPlus1 * ( pg = pixels[yi+1] );\n\t\tb_out_sum = radiusPlus1 * ( pb = pixels[yi+2] );\n\t\ta_out_sum = radiusPlus1 * ( pa = pixels[yi+3] );\n\n\t\tr_sum += sumFactor * pr;\n\t\tg_sum += sumFactor * pg;\n\t\tb_sum += sumFactor * pb;\n\t\ta_sum += sumFactor * pa;\n\n\t\tstack = stackStart;\n\n\t\tfor ( i = 0; i < radiusPlus1; i++ ) {\n\t\t\tstack.r = pr;\n\t\t\tstack.g = pg;\n\t\t\tstack.b = pb;\n\t\t\tstack.a = pa;\n\t\t\tstack = stack.next;\n\t\t}\n\n\t\tfor ( i = 1; i < radiusPlus1; i++ ) {\n\t\t\tp = yi + ( ( widthMinus1 < i ? widthMinus1 : i ) << 2 );\n\t\t\tr_sum += ( stack.r = ( pr = pixels[p] ) ) * ( rbs = radiusPlus1 - i );\n\t\t\tg_sum += ( stack.g = ( pg = pixels[p+1] ) ) * rbs;\n\t\t\tb_sum += ( stack.b = ( pb = pixels[p+2] ) ) * rbs;\n\t\t\ta_sum += ( stack.a = ( pa = pixels[p+3] ) ) * rbs;\n\n\t\t\tr_in_sum += pr;\n\t\t\tg_in_sum += pg;\n\t\t\tb_in_sum += pb;\n\t\t\ta_in_sum += pa;\n\n\t\t\tstack = stack.next;\n\t\t}\n\n\n\t\tstackIn = stackStart;\n\t\tstackOut = stackEnd;\n\n\t\tfor (x = 0; x < width; x++) {\n\t\t\tpixels[yi+3] = pa = (a_sum * mul_sum) >> shg_sum;\n\t\t\t\n\t\t\tif (pa != 0) {\n\t\t\t\tpa = 255 / pa;\n\t\t\t\tpixels[yi]   = ( ( r_sum * mul_sum ) >> shg_sum ) * pa;\n\t\t\t\tpixels[yi+1] = ( ( g_sum * mul_sum ) >> shg_sum ) * pa;\n\t\t\t\tpixels[yi+2] = ( ( b_sum * mul_sum ) >> shg_sum ) * pa;\n\t\t\t} else {\n\t\t\t\tpixels[yi] = pixels[yi+1] = pixels[yi+2] = 0;\n\t\t\t}\n\n\t\t\tr_sum -= r_out_sum;\n\t\t\tg_sum -= g_out_sum;\n\t\t\tb_sum -= b_out_sum;\n\t\t\ta_sum -= a_out_sum;\n\n\t\t\tr_out_sum -= stackIn.r;\n\t\t\tg_out_sum -= stackIn.g;\n\t\t\tb_out_sum -= stackIn.b;\n\t\t\ta_out_sum -= stackIn.a;\n\n\t\t\tp =  ( yw + ( ( p = x + radius + 1 ) < widthMinus1 ? p : widthMinus1 ) ) << 2;\n\n\t\t\tr_in_sum += ( stackIn.r = pixels[p] );\n\t\t\tg_in_sum += ( stackIn.g = pixels[p+1] );\n\t\t\tb_in_sum += ( stackIn.b = pixels[p+2] );\n\t\t\ta_in_sum += ( stackIn.a = pixels[p+3] );\n\n\t\t\tr_sum += r_in_sum;\n\t\t\tg_sum += g_in_sum;\n\t\t\tb_sum += b_in_sum;\n\t\t\ta_sum += a_in_sum;\n\n\t\t\tstackIn = stackIn.next;\n\n\t\t\tr_out_sum += ( pr = stackOut.r );\n\t\t\tg_out_sum += ( pg = stackOut.g );\n\t\t\tb_out_sum += ( pb = stackOut.b );\n\t\t\ta_out_sum += ( pa = stackOut.a );\n\n\t\t\tr_in_sum -= pr;\n\t\t\tg_in_sum -= pg;\n\t\t\tb_in_sum -= pb;\n\t\t\ta_in_sum -= pa;\n\n\t\t\tstackOut = stackOut.next;\n\n\t\t\tyi += 4;\n\t\t}\n\t\tyw += width;\n\t}\n\n\n\tfor ( x = 0; x < width; x++ ) {\n\t\tg_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;\n\n\t\tyi = x << 2;\n\t\tr_out_sum = radiusPlus1 * ( pr = pixels[yi] );\n\t\tg_out_sum = radiusPlus1 * ( pg = pixels[yi+1] );\n\t\tb_out_sum = radiusPlus1 * ( pb = pixels[yi+2] );\n\t\ta_out_sum = radiusPlus1 * ( pa = pixels[yi+3] );\n\n\t\tr_sum += sumFactor * pr;\n\t\tg_sum += sumFactor * pg;\n\t\tb_sum += sumFactor * pb;\n\t\ta_sum += sumFactor * pa;\n\n\t\tstack = stackStart;\n\n\t\tfor ( i = 0; i < radiusPlus1; i++) {\n\t\t\tstack.r = pr;\n\t\t\tstack.g = pg;\n\t\t\tstack.b = pb;\n\t\t\tstack.a = pa;\n\t\t\tstack = stack.next;\n\t\t}\n\n\t\typ = width;\n\n\t\tfor ( i = 1; i <= radius; i++ ) {\n\t\t\tyi = ( yp + x ) << 2;\n\n\t\t\tr_sum += ( stack.r = ( pr = pixels[yi] ) ) * (rbs = radiusPlus1 - i);\n\t\t\tg_sum += ( stack.g = ( pg = pixels[yi+1] ) ) * rbs;\n\t\t\tb_sum += ( stack.b = ( pb = pixels[yi+2] ) ) * rbs;\n\t\t\ta_sum += ( stack.a = ( pa = pixels[yi+3] ) ) * rbs;\n\n\t\t\tr_in_sum += pr;\n\t\t\tg_in_sum += pg;\n\t\t\tb_in_sum += pb;\n\t\t\ta_in_sum += pa;\n\n\t\t\tstack = stack.next;\n\n\t\t\tif ( i < heightMinus1 ) {\n\t\t\t\typ += width;\n\t\t\t}\n\t\t}\n\n\t\tyi = x;\n\t\tstackIn = stackStart;\n\t\tstackOut = stackEnd;\n\n\t\tfor ( y = 0; y < height; y++ ) {\n\t\t\tp = yi << 2;\n\t\t\tpixels[p+3] = pa = ( a_sum * mul_sum ) >> shg_sum;\n\t\t\t\n\t\t\tif ( pa > 0 ) {\n\t\t\t\tpa = 255 / pa;\n\t\t\t\tpixels[p]   = ( ( r_sum * mul_sum ) >> shg_sum) * pa;\n\t\t\t\tpixels[p+1] = ( ( g_sum * mul_sum ) >> shg_sum) * pa;\n\t\t\t\tpixels[p+2] = ( ( b_sum * mul_sum ) >> shg_sum) * pa;\n\t\t\t} else {\n\t\t\t\tpixels[p] = pixels[p+1] = pixels[p+2] = 0;\n\t\t\t}\n\n\t\t\tr_sum -= r_out_sum;\n\t\t\tg_sum -= g_out_sum;\n\t\t\tb_sum -= b_out_sum;\n\t\t\ta_sum -= a_out_sum;\n\n\t\t\tr_out_sum -= stackIn.r;\n\t\t\tg_out_sum -= stackIn.g;\n\t\t\tb_out_sum -= stackIn.b;\n\t\t\ta_out_sum -= stackIn.a;\n\n\t\t\tp = ( x + ( ( ( p = y + radiusPlus1 ) < heightMinus1 ? p : heightMinus1 ) * width ) ) << 2;\n\n\t\t\tr_sum += ( r_in_sum += ( stackIn.r = pixels[p] ) );\n\t\t\tg_sum += ( g_in_sum += ( stackIn.g = pixels[p+1] ) );\n\t\t\tb_sum += ( b_in_sum += ( stackIn.b = pixels[p+2] ) );\n\t\t\ta_sum += ( a_in_sum += ( stackIn.a = pixels[p+3] ) );\n\n\t\t\tstackIn = stackIn.next;\n\n\t\t\tr_out_sum += ( pr = stackOut.r );\n\t\t\tg_out_sum += ( pg = stackOut.g );\n\t\t\tb_out_sum += ( pb = stackOut.b );\n\t\t\ta_out_sum += ( pa = stackOut.a );\n\n\t\t\tr_in_sum -= pr;\n\t\t\tg_in_sum -= pg;\n\t\t\tb_in_sum -= pb;\n\t\t\ta_in_sum -= pa;\n\n\t\t\tstackOut = stackOut.next;\n\n\t\t\tyi += width;\n\t\t}\n\t}\n\n\treturn imageData;\n};\n\nvar greyscale = imageData => {\n\tconst len = imageData.data.length;\n\tlet brightness;\n\n\tfor ( let i = 0; i < len; i += 4 ) {\n\t\tbrightness = 0.34 * imageData.data[i] + 0.5 * imageData.data[i + 1] + 0.16 * imageData.data[i + 2];\n\n\t\timageData.data[i] = brightness;\n\t\timageData.data[i + 1] = brightness;\n\t\timageData.data[i + 2] = brightness;\n\t}\n\t\t\n\treturn imageData;\n};\n\n// most parts taken from http://jsdo.it/akm2/xoYx\n// (starting line 293++)\nvar getEdgePoints = ( imageData, threshold ) => {\n\t// only check every 2nd pixel in imageData to save some time.\n\tconst multiplier = 2;\n\tconst width = imageData.width;\n\tconst height = imageData.height;\n\tconst data = imageData.data;\n\tconst points = [ ];\n\tvar x, y, row, col, sx, sy, step, sum, total;\n\n\tfor ( y = 0; y < height; y += multiplier ) {\n\t\tfor ( x = 0; x < width; x += multiplier ) {\n\t\t\tsum = total = 0;\n\n\t\t\tfor ( row = -1; row <= 1; row++ ) {\n\t\t\t\tsy = y + row;\n\t\t\t\tstep = sy * width;\n\n\t\t\t\tif ( sy >= 0 && sy < height ) {\n\t\t\t\t\tfor ( col = -1; col <= 1; col++ ) {\n\t\t\t\t\t\tsx = x + col;\n\n\t\t\t\t\t\tif ( sx >= 0 && sx < width ) {\n\t\t\t\t\t\t\tsum += data[( sx + step ) << 2];\n\t\t\t\t\t\t\ttotal++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( total ) {\n\t\t\t\tsum /= total;\n\t\t\t}\n\n\t\t\tif ( sum > threshold ) {\n\t\t\t\tpoints.push( { x: x, y: y } );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn points;\n};\n\nvar clamp = ( value, min, max ) => {\n\treturn value < min ? min : value > max ? max : value;\n};\n\nfunction addVertex ( x, y, hash ) {\n\tlet resultKey = x + '|' + y;\n\n\tif ( ! hash[resultKey] ) {\n\t\thash[resultKey] = { x, y };\n\t}\n\n\tresultKey = null;\n}\n\nvar getVerticesFromPoints = ( points, maxPointCount, accuracy, width, height ) => {\n\t// using hash for all points to make sure we have a set of unique vertices.\n\tconst resultHash = { };\n\n\t// use 25% of max point count to create a background grid.\n\t// this avoids having too many \"big\" triangles in areas of the image with low contrast \n\t// next to very small ones in areas with high contrast\n\t// for every other row, start the x value at > 0, so the grid doesn't look too regular\n\tconst gridPointCount = Math.max( ~~( maxPointCount * ( 1 - accuracy ) ), 5 );\n\n\t// http://stackoverflow.com/a/4107092/229189\n\tconst gridColumns = Math.round( Math.sqrt( gridPointCount ) );\n\tconst gridRows = Math.round( Math.ceil( gridPointCount / gridColumns ) );\n\t\n\tconst xIncrement = ~~( width / gridColumns );\n\tconst yIncrement = ~~( height / gridRows );\n\n\tlet rowIndex = 0;\n\tlet startX = 0;\n\n\tlet x = 0;\n\tlet y = 0;\n\n\tfor ( y = 0; y < height; y+= yIncrement ) {\n\t\trowIndex++;\n\n\t\tstartX = rowIndex % 2 === 0 ? ~~( xIncrement / 2 ) : 0; \n\n\t\tfor ( x = startX; x < width; x += xIncrement ) {\n\t\t\tif ( x < width && y < height ) {\n\t\t\t\t// \"distorting\" the grid a little bit so that the\n\t\t\t\t// background vertices don't appear to be on a straight line (which looks boring)\n\t\t\t\taddVertex(\n\t\t\t\t\t~~( x + ( Math.cos( y ) * ( yIncrement ) ) ),\n\t\t\t\t\t~~( y + ( Math.sin( x ) * ( xIncrement ) ) ),\n\t\t\t\t\tresultHash\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// add points in the corners\n\taddVertex( 0, 0, resultHash );\n\taddVertex( width - 1, 0, resultHash );\n\taddVertex( width - 1, height - 1, resultHash );\n\taddVertex( 0, height - 1, resultHash );\n\n\t// add points from all edge points\n\tconst remainingPointCount = maxPointCount - Object.keys( resultHash ).length;\n\tconst edgePointCount = points.length;\n\tconst increment = ~~( edgePointCount / remainingPointCount );\n\n\tif ( maxPointCount > 0 && increment > 0 ) {\n\t\tlet i = 0;\n\n\t\tfor ( i = 0; i < edgePointCount; i += increment ) {\n\t\t\taddVertex( points[i].x, points[i].y, resultHash );\n\t\t}\n\t}\n\n\tpoints = null;\n\n\treturn Object.keys( resultHash ).map( key => {\n\t\treturn resultHash[key];\n\t} );\n};\n\nvar getBoundingBox = points => {\n\tlet xMin = Infinity;\n\tlet xMax = -Infinity;\n\tlet yMin = Infinity;\n\tlet yMax = -Infinity;\n\n\tpoints.forEach( p => {\n\t\tif ( p.x < xMin ) {\n\t\t\txMin = p.x;\n\t\t}\n\n\t\tif ( p.y < yMin ) {\n\t\t\tyMin = p.y;\n\t\t}\n\n\t\tif ( p.x > xMax ) {\n\t\t\txMax = p.x;\n\t\t}\n\n\t\tif ( p.y > yMax ) {\n\t\t\tyMax = p.y;\n\t\t}\n\t} );\n\n\treturn {\n\t\tx: xMin,\n\t\ty: yMin,\n\t\twidth: xMax - xMin,\n\t\theight: yMax - yMin\n\t};\n};\n\nvar addBoundingBoxesToPolygons = ( polygons, colorData, params ) => {\n\tpolygons.forEach( polygon => {\n\t\tpolygon.boundingBox = getBoundingBox( [ polygon.a, polygon.b, polygon.c ] );\n\t} );\n\n\treturn polygons.filter( polygon => {\n\t\treturn polygon.boundingBox.width > 0 && polygon.boundingBox.height > 0;\n\t} );\n};\n\n/**\n * Get color object by position\n * @param  {Object} pos         {x,y} object\n * @param  {Object} colorData   Image color data object\n * @param  {Object} [transparentColor] (optional) RGBA color object. Used to set specific color to transparent pixels\n * @return {Object}             RGBA color object\n */\nvar getColorByPos = ( pos, colorData, transparentColor ) => {\n\tconst x = clamp( pos.x, 1, colorData.width - 2 );\n\tconst y = clamp( pos.y, 1, colorData.height - 2 );\n\tlet index = ( ( x | 0 ) + ( y | 0 ) * colorData.width ) << 2;\n\n\tif ( index >= colorData.data.length ) {\n\t\tindex = colorData.data.length - 5;\n\t}\n\n\tconst alpha = colorData.data[index + 3] / 255;\n\n\t// Return RGBA color object\n\treturn ( transparentColor && alpha === 0 ) ? transparentColor : {\n\t\tr: colorData.data[index],\n\t\tg: colorData.data[index + 1],\n\t\tb: colorData.data[index + 2],\n\t\ta: alpha\n\t};\n};\n\n/**\n * Get polygon's center point\n * @param  {Object} polygon Polygon object\n * @return {Object}         Point coordinates {x,y}\n */\nvar polygonCenter = polygon => {\n\treturn {\n\t\tx: ( polygon.a.x + polygon.b.x + polygon.c.x ) * 0.33333,\n\t\ty: ( polygon.a.y + polygon.b.y + polygon.c.y ) * 0.33333\n\t};\n};\n\n/**\n * Is color transparent ?\n * @param  {Object} color Color object\n * @return {Boolean}      Is transparent?\n */\nvar isTransparent = color => {\n\treturn color.a === 0;\n};\n\n// https://gist.githubusercontent.com/oriadam/396a4beaaad465ca921618f2f2444d49/raw/76b0de6caffaac59f8af2b4dfa0e0b6397cf447d/colorValues.js\n// return array of [r,g,b,a] from any valid color. if failed returns undefined\nfunction strToColorArr ( color ) {\n\tif ( typeof color === 'string' ) {\n\t\tlet result = [ 0, 0, 0, 0 ];\n\t\t\n\t\tif ( color[0] === '#' )\t{\n\t\t\t// convert #RGB and #RGBA to #RRGGBB and #RRGGBBAA\n\t\t\tif ( color.length < 7 ) {\n\t\t\t\tcolor = `#${color[1]}${color[1]}${color[2]}${color[2]}${color[3]}${color[3]}${color.length > 4 ? color[4] + color[4] : ''}`;\n\t\t\t}\n\n\t\t\tresult = [\n\t\t\t\tparseInt(color.substr( 1, 2 ), 16),\n\t\t\t\tparseInt(color.substr( 3, 2 ), 16),\n\t\t\t\tparseInt(color.substr( 5, 2 ), 16),\n\t\t\t\tcolor.length > 7 ? parseInt( color.substr( 7, 2 ), 16 ) / 255 : 1\n\t\t\t];\n\t\t}\n\n\t\tif ( color.indexOf('rgb') === 0 ) {\n\t\t\t// convert 'rgb(R,G,B)' to 'rgb(R,G,B)A' which looks awful but will pass the regxep below\n\t\t\tif ( ! color.includes( 'rgba' ) ) {\n\t\t\t\tcolor += ',1';\n\t\t\t}\n\n\t\t\tresult = color\n\t\t\t\t.match( /[\\.\\d]+/g )\n\t\t\t\t.map( a => +a );\n\t\t}\n\t\t\n\t\treturn result;\n\t} else {\n\t\treturn;\n\t}\n\n}\n\nfunction strToColor ( str ) {\n\tconst color = strToColorArr( str );\n\n\tif ( color ) {\n\t\tconst [ r, g, b, a ] = color;\n\t\treturn { r, g, b, a };\n\t} else {\n\t\treturn;\n\t}\n}\n\nfunction addColorToPolygons ( polygons, colorData, params ) {\n\tconst { fill, stroke, strokeWidth, lineJoin, transparentColor } = params;\n\tconst fillColor = fill ? strToColor( fill ) : false;\n\tconst strokeColor = stroke ? strToColor( stroke ) : false;\n\n\t/**\n\t * Color override logic\n\t * @param  {Object} color    Color object\n\t * @param  {String} override Override color (fillColor/strokeColor)\n\t * @return {String}          CSS formatted color (rgba,..)\n\t */\n\tconst getColor = ( color, override ) => {\n\t\tconst t = ( isTransparent( color ) && transparentColor );\t// Color is transparent, and transparentColor override is defined\n\t\tconst c = t ? transparentColor : color;\n\t\treturn ( override && !t ) ? override : c;\t\t// Priority: transparentColor -> override -> supplied color\n\t};\n\n\tpolygons.forEach( polygon => {\n\t\tconst color = getColorByPos( polygonCenter( polygon ), colorData );\n\n\t\tif ( fill ) {\n\t\t\tpolygon.fill = getColor( color, fillColor );\n\t\t}\n\n\t\tif ( stroke ) {\n\t\t\tpolygon.strokeColor = getColor(color, strokeColor);\n\t\t\tpolygon.strokeWidth = strokeWidth;\n\t\t\tpolygon.lineJoin = lineJoin;\n\t\t}\n\t} );\n\n\treturn polygons;\n}\n\n//  http://stackoverflow.com/a/9733420/229189\nvar luminance = color => {\n\tconst a = [ color.r, color.g, color.b ].map( v => {\n\t\tv /= 255;\n\t\treturn ( v <= 0.03928 ) ? v / 12.92 : Math.pow( ( ( v + 0.055 ) / 1.055 ), 2.4 );\n\t} );\n\n\treturn a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n};\n\nvar distance = ( a, b ) => {\n\tlet dx = b.x - a.x;\n\tlet dy = b.y - a.y;\n\n\treturn Math.sqrt( ( dx * dx ) + ( dy * dy ) );\n};\n\nfunction addGradientsToPolygons ( polygons, colorData, params ) {\n\tpolygons.forEach( polygon => {\n\t\tlet data = { };\n\n\t\t'abc'.split( '' ).forEach( key => {\n\t\t\tconst color = getColorByPos( polygon[key], colorData, params.transparentColor );\n\t\t\t\n\t\t\tdata[key] = {\n\t\t\t\tkey: key,\n\t\t\t\tcolor: color,\n\t\t\t\tx: polygon[key].x,\n\t\t\t\ty: polygon[key].y\n\t\t\t};\n\n\t\t\tdata[key].luminance = luminance( data[key].color );\n\n\t\t\tconst otherKeys = 'abc'.replace( key, '' ).split( '' );\n\n\t\t\tdata[key].median = {\n\t\t\t\tx: ( polygon[otherKeys[0]].x + polygon[otherKeys[1]].x ) / 2,\n\t\t\t\ty: ( polygon[otherKeys[0]].y + polygon[otherKeys[1]].y ) / 2\n\t\t\t};\n\n\t\t\tdata[key].medianColor = getColorByPos( data[key].median, colorData, params.transparentColor );\n\t\t\tdata[key].medianLuminance = luminance( data[key].medianColor );\n\t\t} );\n\n\t\t// sort by axis of most difference in luminance\n\t\tconst pointsByDeltaInLuminance = [ data.a, data.b, data.c ].sort( ( u, v ) => {\n\t\t\treturn Math.abs( u.luminance - u.medianLuminance ) - Math.abs( v.luminance - v.medianLuminance );\n\t\t} );\n\n\t\tconst pointWithMostDeltaInLuminance = pointsByDeltaInLuminance[0];\n\t\tconst startPoint = pointsByDeltaInLuminance[0];\n\t\tconst endPoint = pointWithMostDeltaInLuminance.median;\n\n\t\tconst gradienStopPositions = [ startPoint ];\n\n\t\tconst startToEndDistance = distance( startPoint, endPoint );\n\n\t\tfor ( let i = 1, len = params.gradientStops - 2; i < len; i++ ) {\n\t\t\tconst pointDistance = i * ( startToEndDistance / params.gradientStops );\n\t\t\tconst pointPercent = pointDistance / startToEndDistance;\n\t\t\t\n\t\t\tconst point = {\n\t\t\t\tx: startPoint.x + pointPercent * ( endPoint.x - startPoint.x ), \n\t\t\t\ty: startPoint.y + pointPercent * ( endPoint.y - startPoint.y )\n\t\t\t};\n\n\t\t\tgradienStopPositions.push( point );\n\t\t}\n\n\t\tgradienStopPositions.push( endPoint );\n\n\t\tpolygon.gradient = {\n\t\t\tx1: pointWithMostDeltaInLuminance.x,\n\t\t\ty1: pointWithMostDeltaInLuminance.y,\n\t\t\tx2: pointWithMostDeltaInLuminance.median.x,\n\t\t\ty2: pointWithMostDeltaInLuminance.median.y,\n\t\t\tcolors: gradienStopPositions.map( pos => {\n\t\t\t\treturn getColorByPos( pos, colorData, params.transparentColor );\n\t\t\t} )\n\t\t};\n\n\t\tif ( params.stroke ) {\n\t\t\tpolygon.strokeWidth = params.strokeWidth;\n\t\t\tpolygon.lineJoin = params.lineJoin;\n\t\t}\n\n\t\tdata = null;\n\t} );\n\n\treturn polygons;\n}\n\n/**\n * Filter polygons with transparent color\n * @param  {Array} polygons    Polygons array\n * @param  {Object} colorData  Color data\n * @return {Array}             Filtered polygons array\n */\nvar filterTransparentPolygons = ( polygons, colorData ) => {\n\treturn polygons.filter( polygon => {\n\t\tconst color = getColorByPos( polygonCenter( polygon ), colorData );\n\t\treturn ! isTransparent( color );\n\t});\n};\n\nvar imageDataToPolygons = ( imageData, params ) => {\n\tif ( isImageData( imageData ) ) {\n\t\tconst imageSize = { width: imageData.width, height: imageData.height };\n\t\tconst tmpImageData = copyImageData( imageData );\n\t\tconst colorImageData = copyImageData( imageData );\n\t\tconst blurredImageData = stackblur( tmpImageData, 0, 0, imageSize.width, imageSize.height, params.blur );\n\t\tconst greyscaleImageData = greyscale( blurredImageData );\n\t\tconst edgesImageData = sobel( greyscaleImageData ).toImageData();\n\t\tconst edgePoints = getEdgePoints( edgesImageData, params.threshold );\n\t\tconst edgeVertices = getVerticesFromPoints( edgePoints, params.vertexCount, params.accuracy, imageSize.width, imageSize.height );\n\t\tlet polygons = delaunay_2( edgeVertices );\n\t\t\n\t\tpolygons = addBoundingBoxesToPolygons( polygons );\n\t\t\n\t\tif ( ! params.transparentColor ) {\n\t\t\tpolygons = filterTransparentPolygons( polygons, colorImageData );\n\t\t}\n\t\t\n\t\tif ( params.fill === true && params.gradients === true ) {\n\t\t\tpolygons = addGradientsToPolygons( polygons, colorImageData, params );\n\t\t} else {\n\t\t\tpolygons = addColorToPolygons( polygons, colorImageData, params );\n\t\t}\n\n\t\treturn polygons;\n\t} else {\n\t\tthrow new Error( \"Can't work with the imageData provided. It seems to be corrupt.\" );\n\t}\n};\n\nonmessage = msg => {\n\tif ( msg.data.imageData && msg.data.params ) {\n\t\ttry {\n\t\t\tlet imageData = msg.data.imageData;\n\n\t\t\t// phantomjs seems to have some memory loss so we need to make sure\n\t\t\tif ( typeof imageData.width === 'undefined' && typeof msg.data.imageDataWidth === 'number' ) {\n\t\t\t\timageData.width = msg.data.imageDataWidth;\n\t\t\t}\n\n\t\t\tif ( typeof imageData.height === 'undefined' && typeof msg.data.imageDataHeight === 'number' ) {\n\t\t\t\timageData.height = msg.data.imageDataHeight;\n\t\t\t}\n\t\t\t\n\t\t\tconst polygons = imageDataToPolygons( msg.data.imageData, msg.data.params );\n\t\t\t\t\t\t\n\t\t\tself.postMessage( {\n\t\t\t\tpolygonJSONStr: JSON.stringify( polygons )\n\t\t\t} );\n\t\t} catch ( err ) {\n\t\t\tself.postMessage( { err: err.message || err } );\n\t\t}\n\n\t} else {\n\t\tif ( msg.data.imageData ) {\n\t\t\tself.postMessage( { err: 'Parameters are missing.' } );\n\t\t} else {\n\t\t\tself.postMessage( { err: 'ImageData is missing.' } );\n\t\t}\n\t}\n\t\n\tself.close();\n};\n"],{type:"text/javascript"}))),n={getParams:function(){return a},getInput:c,getOutput:d},e={fromImage:function(t){return h(x,t)},fromImageSync:function(t){return h(x,t,!0)},fromImageData:function(t){return h(function(t){return t},t)},fromImageDataSync:function(t){return h(function(t){return t},t,!0)}},r={toData:function(t){return p(function(t){return t},t)},toDataSync:function(t){return p(function(t){return t},t,!0)},toDataURL:function(t){return p(b,t)},toDataURLSync:function(t){return p(b,t,!0)},toImageData:function(t){return p(v,t)},toImageDataSync:function(t){return p(v,t,!0)},toSVG:function(t){return p(E,t)},toSVGSync:function(t){return p(E,t,!0)}};function c(){var t=I({},n);return i||I(t,e),t}function d(){var t=I({},n);return o||I(t,r),t}function h(e,a,t){return s=!!t,i=function(){return s?e(a):new Promise(function(t,n){try{t(e(a))}catch(t){n(t)}})},(g()?m:d)()}function p(i,r,t){return l=!!t,o=function(e,a){return l?i(e,a,r):new Promise(function(t,n){try{t(i(e,a,r))}catch(t){n(t)}})},(g()?m:c)()}function g(){return i&&o}function m(){if(s&&l){var t=i(a),n=J(t,a);return o(n,t)}return new Promise(function(n,t){var r,e;new Promise(function(t,n){if(s)try{t(i(e))}catch(t){n(t)}else i(e).then(t,n)}).then(function(t){return n=r=t,i=a,new Promise(function(e,a){u.addEventListener("message",function(t){var n;t.data&&t.data.polygonJSONStr?(n=JSON.parse(t.data.polygonJSONStr),e(n)):t.data&&t.data.err?a(t.data.err):a(t)}),u.postMessage({params:i,imageData:n,imageDataWidth:n.width,imageDataHeight:n.height})});var n,i},t).then(function(t){return e=t,a=r,new Promise(function(t,n){if(l)try{t(o(e,a))}catch(t){n(t)}else o(e,a).then(t,n)});var e,a},t).then(function(t){n(t)},t)})}return c()}var z=new(function(n){function t(t){void 0===t&&(t={}),n.call(this),this.id=Math.random(),this._state=t||{},this._rafId;var a=this;this.state=new Proxy(this._state,{set:function(t,n,e){return t[n]=e,cancelAnimationFrame(a._rafId),a._rafId=requestAnimationFrame(function(){a.emit("state.update",a._state)}),!0}})}return n&&(t.__proto__=n),((t.prototype=Object.create(n&&n.prototype)).constructor=t).prototype.update=function(n,t){var e=this;"string"==typeof n&&(this.state[n]=t),"object"==typeof n&&Object.keys(n).forEach(function(t){e.state[t]=n[t]})},t}(i));function K(t,n,e,a,i,r){n=(t-n)/(e-n)*(i-a)+a;return n=r?i<a?Math.min(Math.max(n,i),a):Math.min(Math.max(n,a),i):n}function $(){var n=this;this.canvasWrapperEl=document.querySelector(".sn-workspace__canvas-wrapper"),this.canvasEl=document.getElementById("canvas"),this.ctx=this.canvasEl.getContext("2d"),this.isProcessing=!1,this.resizeAnimationFrameId=null,this.image=null,r.on("image-loaded",this.generate,this),r.on("export-requested",this.exportData,this),z.on("state.update",function(t){return n.update(t)},this),window.addEventListener("resize",function(){n.resized()})}l={triangulationParams:{configurable:!0}};l.triangulationParams.get=function(){return function(t){var n,e={};for(n in t){switch(n){case"blur":e[n]=Math.round(K(parseInt(t[n],10),0,100,1,100));break;case"accuracy":e[n]=K(parseInt(t[n],10),0,100,1,.1);break;case"vertex-count":e.vertexCount=Math.round(K(parseInt(t[n],10),0,100,100,5e3))}e.fill=!!t.fill,e.gradients=!!t.gradients,e.gradientStops=2,e.strokeWidth=K(parseInt(t["stroke-width"],10),0,100,0,100)}return e}(z.state)},$.prototype.update=function(){!this.isProcessing&&this.image&&this.processImage(this.image)},$.prototype.resized=function(){var t=this;cancelAnimationFrame(this.resizeAnimationFrameId),this.resizeAnimationFrameId=requestAnimationFrame(function(){t.update()})},$.prototype.generate=function(t){this.isProcessing||(this.image=t,this.update())},$.prototype.processImage=function(r){var o=this;this.isProcessing=!0,X(this.triangulationParams).fromImage(r).toImageData({dpr:s}).then(function(t){var n,e,a,i;i=o.canvasEl,(a=o.ctx).clearRect(a,0,0,i.width,i.height),n=o.canvasEl,e=r,a=s,void 0===(i=o.canvasWrapperEl)&&(i=window),n.width=e.width*a,n.height=e.height*a,a=i.clientWidth,i=i.clientHeight,a/=n.width,i/=n.height,i=Math.min(a,i),n.style.maxWidth=n.width*i+"px",n.style.maxHeight=n.height*i+"px",o.ctx.putImageData(t,0,0),o.isProcessing=!1})},$.prototype.exportData=function(t){"function"==typeof t&&t({png:this.canvasEl.toDataURL("image/png"),svg:X(this.triangulationParams).fromImageSync(this.image).toSVGSync()})},Object.defineProperties($.prototype,l);function Q(){this.wasInitialized=!1,this.image=new Image,this.image.addEventListener("load",this.imageLoaded.bind(this)),r.on("set-new-src",this.setSrc,this)}Q.prototype.imageLoaded=function(){r.emit("image-loaded",this.image),this.wasInitialized&&r.emit("close-intro"),this.wasInitialized=!0},Q.prototype.setSrc=function(t){var n=this;this.image.src=t,this.wasInitialized&&void 0!==this.image.naturalWidth&&0!==this.image.naturalWidth&&setTimeout(function(){n.imageLoaded()},100)};function Z(){t&&(this.reader=new FileReader,this.reader.addEventListener("load",this.fileLoaded.bind(this),!1),r.on("load-file",this.loadFile,this))}var tt=["image/png","image/jpg","image/jpeg"];Z.prototype.loadFile=function(t){t&&t.type&&tt.includes(t.type)&&this.reader.readAsDataURL(t)},Z.prototype.fileLoaded=function(t){r.emit("set-new-src",t.target.result)};function nt(){n&&(document.addEventListener("drop",this.dropped.bind(this),!1),document.addEventListener("dragover",function(t){return t.preventDefault()},!1),document.addEventListener("dragleave",function(t){return t.preventDefault()},!1))}nt.prototype.dropped=function(t){t.preventDefault(),t.dataTransfer&&t.dataTransfer.files&&t.dataTransfer.files[0]&&(r.emit("load-file",t.dataTransfer.files[0]),r.emit("close-intro"))};function et(){var n=this;this.values={},this.animationFrameId=null;var t=document.querySelector("#controls");this.controlEls=Array.from(t.querySelectorAll("[data-control-id]")),z.on("state.update",function(t){return n.stateUpdated(t)},this),requestAnimationFrame(function(){n.setInitalState()}),this.controlEls.forEach(function(t){t.addEventListener("change",n.controlUpdated.bind(n),!1),t.addEventListener("input",n.controlUpdated.bind(n),!1)}),this.randomButtonEl=document.querySelector("#random-button"),this.randomButtonEl.addEventListener("click",function(){n.randomize()})}l={constraints:{configurable:!0},numberInputEls:{configurable:!0},checkboxInputEls:{configurable:!0},randomValues:{configurable:!0}};et.prototype.setInitalState=function(){var a=this,t=this.controlEls.reduce(function(t,n){var e=n.getAttribute("data-control-id");return void 0===t[e]&&(t[e]=a.getInputValue(n)),t},{});z.update(t)},et.prototype.stateUpdated=function(e){var a=this;Object.keys(e).forEach(function(n){a.getInputEls(n).forEach(function(t){t[a.getValueAttr(t)]!==e[n]&&(t[a.getValueAttr(t)]=e[n])})})},et.prototype.controlUpdated=function(t){var n,e=this;Array.isArray(t)?t.forEach(function(t){return e.controlUpdated(t)}):(n=t,cancelAnimationFrame(this.animationFrameId),t.target&&(n=t.target),z.update(this.getInputKey(n.id),this.getInputValue(n)))},et.prototype.randomize=function(){z.update(this.randomValues)},et.prototype.getInputEls=function(n){return this.controlEls.filter(function(t){return t.getAttribute("data-control-id")===n})},et.prototype.getInputKey=function(t){return t.replace("-slider","").replace("-number","").replace("-input","")},et.prototype.setControlValues=function(t){var n,e={};for(n in t){var a=this.getInputEls(n);this.setInputValue(a,t[n]),this.controlUpdated(a),e[this.getInputKey(n)]=t[n]}this.values=e,r.emit("control-updated",this.values)},et.prototype.setInputValue=function(t,n){var e,a;Array.isArray(t)?(a=this.getValueAttr(e=t),e.forEach(function(t){t[a]!==n&&(t[a]=n)})):t[this.getValueAttr(t)]=n},et.prototype.getInputValue=function(t){var n=t[this.getValueAttr(t)];return["number","range"].includes(t.getAttribute("type"))&&(n=parseInt(n,10)),n=["checkbox"].includes(t.getAttribute("type"))?!!n:n},et.prototype.getValueAttr=function(t){return"checkbox"===t.type?"checked":"value"},l.constraints.get=function(){var e=this,a={};return this.numberInputEls.forEach(function(t){var n=e.getInputKey(t.id);a[n]={min:parseInt(t.min,10),max:parseInt(t.max,10)}}),a},l.numberInputEls.get=function(){return this.controlEls.filter(function(t){return"number"===t.type})},l.checkboxInputEls.get=function(){return this.controlEls.filter(function(t){return"checkbox"===t.type})},l.randomValues.get=function(){var t,n,e,a=this,i={};for(t in this.constraints){var r=this.constraints[t];i[t]=(n=r.min,e=r.max,void 0===(r=!0)&&(r=!1),n+=Math.random()*(e-n),r?Math.round(n):n)}return this.checkboxInputEls.forEach(function(t){i[a.getInputKey(t.id)]=.5<Math.random()}),i},Object.defineProperties(et.prototype,l);function at(){this.exportBtnEl=document.getElementById("export-button"),this.pngLinkEl=document.getElementById("png-link"),this.svgLinkEl=document.getElementById("svg-link"),this.exportBtnEl.addEventListener("click",this.exportBtnClicked.bind(this),!1),this.pngLinkEl.addEventListener("click",this.hidePNGLink.bind(this),!1),this.svgLinkEl.addEventListener("click",this.hideSVGLink.bind(this),!1)}at.prototype.exportBtnClicked=function(t){r.emit("export-requested",this.updateLinkAddresses.bind(this))},at.prototype.updateLinkAddresses=function(t){this.pngLinkEl.href=t.png,this.pngLinkEl.classList.add("is-active");t=new Blob([t.svg],{type:"image/svg+xml"}),t=window.URL.createObjectURL(t);this.svgLinkEl.href=t,this.svgLinkEl.classList.add("is-active")},at.prototype.hidePNGLink=function(){this.pngLinkEl.classList.remove("is-active")},at.prototype.hideSVGLink=function(){this.svgLinkEl.classList.remove("is-active")};function it(){t&&(this.fileReader=new FileReader,this.importInputEl=document.getElementById("import-input"),this.importInputEl.addEventListener("change",this.fileSelected.bind(this),!1))}it.prototype.fileSelected=function(t){t&&t.target&&t.target.files&&t.target.files[0]&&(r.emit("load-file",t.target.files[0]),r.emit("close-intro"))};function rt(){var n=this;this.shareWrapperEl=document.querySelector(".sn-share"),this.step1El=document.querySelector('[data-share-step="1"]'),this.step2El=document.querySelector('[data-share-step="2"]'),this.uploadBtn=document.getElementById("share-upload-btn"),this.imgurTitleInputEl=document.getElementById("imgur-title"),this.imgurDescriptionInputEl=document.getElementById("imgur-description"),this.defaultImgurTitle="Triangulated Image",this.defaultImgurDescription="Created with snorpey's triangulation tool https://snorpey.github.io/triangulation",this.imgurButtonEl=document.getElementById("imgur-button"),this.imgurURLInputEl=document.getElementById("imgur-url-input"),this.imgurURLLinkEl=document.getElementById("imgur-url-link"),this.imgurURLErrorEl=document.getElementById("imgur-url-error"),this.twitterLinkEl=document.getElementById("twitter-link"),this.facebookLinkEl=document.getElementById("facebook-link"),this.redditLinkEl=document.getElementById("reddit-link"),this.nativeShareBtnEl=document.getElementById("native-share-btn"),a&&(this.nativeShareBtnEl.classList.removeAttribute("visibility","hidden"),this.nativeShareBtnEl.addEventListener("click",function(){return n.shareNatively()})),Array.from(document.querySelectorAll('[data-callback="startover"]')).forEach(function(t){t.addEventListener("click",function(){return n.startOver()})}),this.isUploading=!1,this.uploadBtn.addEventListener("click",this.uploadClicked.bind(this),!1),this.imgurURLInputEl.addEventListener("click",this.selectInput.bind(this),!1),this.imgurTitleInputEl.addEventListener("focus",function(){n.imgurTitleInputEl.value===n.defaultImgurTitle&&(n.imgurTitleInputEl.value="")}),this.imgurTitleInputEl.addEventListener("blur",function(){""===n.imgurTitleInputEl.value&&(n.imgurTitleInputEl.value=n.defaultImgurTitle)}),this.imgurDescriptionInputEl.addEventListener("focus",function(){n.imgurDescriptionInputEl.value===n.defaultImgurDescription&&(n.imgurDescriptionInputEl.value="")}),this.imgurDescriptionInputEl.addEventListener("blur",function(){""===n.imgurDescriptionInputEl.value&&(n.imgurDescriptionInputEl.value=n.defaultImgurDescription)})}rt.prototype.uploadClicked=function(t){this.isUploading||r.emit("export-requested",this.upload.bind(this))},rt.prototype.selectInput=function(t){this.imgurURLInputEl.select()},rt.prototype.upload=function(t){var n,e,a=this;this.isUploading||(this.isUploading=!0,this.shareWrapperEl.setAttribute("data-current-step","loading"),n=this.imgurTitleInputEl.value||null,e=this.imgurDescriptionInputEl.value||null,Promise.resolve().then(function(){return fetch("https://api.imgur.com/3/image.json",{method:"POST",headers:{Authorization:"Client-ID "+atob("YTRjMjQzODBkODg0OTMy"),"Content-Type":"application/json"},body:JSON.stringify({image:t.png.split(",")[1],type:"base64",title:n,description:e}),type:"json",crossOrigin:!0}).then(function(t){return t.json()})}).then(function(t){var n;t&&t.success?(a.shareWrapperEl.setAttribute("data-current-step","share"),a.imageUploaded(t)):(n="An error occured. Please try again later.",t&&t.data&&t.data.error&&"string"==typeof t.data.error&&(n=JSON.parse(JSON.stringify(t.data.error))),a.imgurURLErrorEl.textContent=n,a.uploadFailed())}))},rt.prototype.imageUploaded=function(t){var n,e,a;this.isUploading=!1,t&&t.data&&t.data.link?(e=(a="Check out what I made with @snorpey’s triangulation tool")+": "+(n=t.data.link)+" https://snorpey.github.io/triangulation",a="https://www.facebook.com/sharer/sharer.php?s=100&&p[url]="+n+"&p[title]="+(t="Triangles!")+"&p[images][0]="+n+"&p[summary]="+encodeURIComponent(a),this.imgurButtonEl.classList.remove("is-uploading"),this.imgurURLInputEl.setAttribute("value",n),this.imgurURLLinkEl.href=n,this.twitterLinkEl.href="https://twitter.com/intent/tweet?text="+encodeURIComponent(e),this.facebookLinkEl.href=a,this.redditLinkEl.href="https://www.reddit.com/submit?url="+encodeURIComponent(n)+"&title="+t):this.uploadFailed()},rt.prototype.uploadFailed=function(t){this.isUploading=!1,this.shareWrapperEl.setAttribute("data-current-step","error")},rt.prototype.startOver=function(){this.shareWrapperEl.setAttribute("data-current-step","form")},rt.prototype.shareNatively=function(){var e=this;a&&r.emit("export-requested",function(t){var n,t=t.png.split(",")[1];n=e.imgurTitleInputEl.value+".png",fetch(t).then(function(t){return t.blob()}).then(function(t){return new File([t],n,{type:"image/png"})}).then(function(t){return navigator.share({files:[t],title:e.imgurTitleInputEl.value,text:e.imgurDescriptionInputEl.value})})})};function ot(){var n=this;this.camButtonEl=document.getElementById("cam-button"),(!!navigator.mediaDevices&&!!navigator.mediaDevices.enumerateDevices?navigator.mediaDevices.enumerateDevices().then(function(t){var n=!1;return t.forEach(function(t){t&&t.kind&&"videoinput"===t.kind&&(n=!0)}),n}):Promise.resolve(!1)).then(function(t){t&&(n.camButtonEl.removeAttribute("visibility"),n.camButtonEl.addEventListener("click",function(){return n.toggleCameraDisplay()}),n.overlayEl=document.querySelector(".sn-overlay--cam"),n.shutterBtnEl=document.querySelector("#cam_shutter"),n.closeBtnEl=document.querySelector("#cam_close"),n.videoEl=document.querySelector("#cam_video"),n.shutterBtnEl.addEventListener("click",function(){return n.takePicture()}),n.closeBtnEl.addEventListener("click",function(){return n.closeCamera()}),n.stream=null)})}ot.prototype.toggleCameraDisplay=function(){this.stream?this.closeCamera():this.openCamera()},ot.prototype.openCamera=function(){var t,n=this;document.documentElement.classList.add("sn-overlay__container--open"),this.overlayEl.removeAttribute("aria-hidden"),t=(t=void 0===t?null:t)||{video:!0,audio:!1},(navigator.mediaDevices?navigator.mediaDevices.getUserMedia(t).then(function(t){return t.getVideoTracks().forEach(function(t){!t.getCapabilities||(t=t.getCapabilities()).facingMode&&0<t.facingMode.length&&(currentCameraDirection=t.facingMode[0])}),t}):Promise.reject(new Error("Can't access camera."))).then(function(t){n.stream=t,n.videoEl.srcObject=t})},ot.prototype.closeCamera=function(){this.stream&&(this.videoEl.srcObject=null,this.stream.getTracks().forEach(function(t){return t.stop()}),this.stream=null),document.documentElement.classList.remove("sn-overlay__container--open"),this.overlayEl.setAttribute("aria-hidden","true")},ot.prototype.takePicture=function(){var t;this.stream&&((t=document.createElement("canvas")).width=this.videoEl.clientWidth,t.height=this.videoEl.clientHeight,t.getContext("2d").drawImage(this.videoEl,0,0),t=t.toDataURL("image/png"),r.emit("set-new-src",t),this.closeCamera())},(e()?Promise.resolve():new Promise(function(t){var n=setInterval(function(){clearInterval(n),e()&&t()},50)})).then(function(){new $,new Q,new Z,new nt,new et,new at,new it,new ot,new rt;var t=document.body.getAttribute("data-defaultimage");r.emit("set-new-src",t),Array.from(document.querySelectorAll(".sn-btn[for]")).forEach(function(t){var e=t.getAttribute("for");t.addEventListener("click",function(){setTimeout(function(){Array.from(document.querySelectorAll(".sn-btn__toggle-input")).forEach(function(t){var n=t.getAttribute("id");n===e||[n,e].includes("is-showing-controls")||(t.checked=!1)})},40)})})})});